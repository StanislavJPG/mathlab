# Generated by Django 5.2 on 2025-04-10 21:31

import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import uuid
from django.db import migrations, models


def generate_theorist_blacklist(apps, schema_editor):
    Theorist = apps.get_model('theorist', 'Theorist')
    TheoristFriendshipBlackList = apps.get_model('theorist', 'TheoristFriendshipBlackList')
    obj_to_save = []

    for theorist in Theorist.objects.all():
        obj_to_save.append(TheoristFriendshipBlackList(owner=theorist))
    TheoristFriendshipBlackList.objects.bulk_create(obj_to_save)


class Migration(migrations.Migration):
    dependencies = [
        ('theorist', '0008_alter_theorist_modified_at_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TheoristFriendshipBlackList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('reason_of_blocking', models.TextField(blank=True, max_length=500, null=True)),
                ('blocked_theorists', models.ManyToManyField(related_name='blacklisted_by', to='theorist.theorist')),
                (
                    'owner',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name='blacklist', to='theorist.theorist'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Blacklist',
                'verbose_name_plural': 'Blacklists',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TheoristFriendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'status',
                    models.CharField(
                        choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')],
                        default='pending',
                    ),
                ),
                ('status_changed_at', models.DateTimeField(null=True, blank=True)),
                (
                    'receiver',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='friendship_receiver',
                        to='theorist.theorist',
                    ),
                ),
                (
                    'requester',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='friendship_requester',
                        to='theorist.theorist',
                    ),
                ),
            ],
            options={
                'ordering': ('status_changed_at',),
                'verbose_name': 'Friendship',
                'verbose_name_plural': 'Friendships',
                'constraints': [
                    models.UniqueConstraint(fields=('receiver', 'requester'), name='theorist_unique_members')
                ],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.RunPython(generate_theorist_blacklist, reverse_code=migrations.RunPython.noop),
    ]
